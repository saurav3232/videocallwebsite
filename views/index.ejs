<!doctype html>
<html>

<head>
  <title>WebSocket Chat Demo with WebRTC Calling</title>
  <meta charset="utf-8">

  <link rel="stylesheet" href="css/bootstrap.min.css">
  <link rel="stylesheet" href="css/styles.css">
</head>

<body>
  <div class="head-container">
    <div class="head">
      <label id="logo">Meet</label>
      <label id="username"><%=username%></label>
      <button id="logout"  onclick="logout();">Logout</button>
    </div>
  </div>
  <div class="container-fluid">
    <div id="showOnVideoCall">
      <div id="copydiv" position="relative">
        <button class="btn btn-danger" id="copyclip" onclick="copyLinkToClipboard();" disabled>Copy</button>
        <input type="text" class="form-control" id="search-box" placeholder="copy this link" readonly>
      </div>
  
  
      <div id="videoContainer" >
        <div id="streamRow">
          <video id="received_video" autoplay></video>
        </div>
        <div id="localRow">
          <video id="local_video" autoplay></video>
        </div>
      </div>
      <div class="control_container">
        <button id="hangup-button" class="btn btn-warning" onclick="hangUpCall();" role="button" disabled>
          Hang Up
        </button>
        <label class="toggle">
          <input class="toggle-checkbox" id="AudioCheck" type="checkbox" checked>
          <div class="toggle-switch"></div>
          <span class="toggle-label">Audio</span>
        </label>
        <label class="toggle">
          <input class="toggle-checkbox" id="VideoCheck" type="checkbox" checked>
          <div class="toggle-switch"></div>
          <span class="toggle-label">Video</span>
        </label>
      </div>
    </div>
  </div>
  
  <div id="hideOnVideoCall">
    <div class="control_container" >
      <button id="genlink" onclick="clickedNewMeet();">New Meet</button>
    </div>
  </div>
  














  <script>
    "use strict";
    function create_UUID() {
      var dt = new Date().getTime();
      var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = (dt + Math.random() * 16) % 16 | 0;
        dt = Math.floor(dt / 16);
        return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);
      });
      return uuid;
    }
    var myHostname = window.location.hostname;
    if (!myHostname) {
      myHostname = "localhost";
    }
    log("Hostname: " + myHostname);
    var connection = null;
    var clientID = 0;
    var mediaConstraints = {
      audio: true,            // We want an audio track
      video: {
        aspectRatio: {
          ideal: 1.333333     // 3:2 aspect is preferred
        }
      }
    };
    var myUsername = null;
    var targetUsername = null;      // To store username of other peer
    var myPeerConnection = null;    // RTCPeerConnection
    var transceiver = null;         // RTCRtpTransceiver
    var webcamStream = null;
    let port="<%=Port%>";

    let localVideo= document.getElementById("local_video");
    let audioCheck = document.getElementById("AudioCheck");
    let videoCheck = document.getElementById("VideoCheck");
    let showOnVideoCall=document.getElementById("showOnVideoCall");
    let hideOnVideoCall=document.getElementById("hideOnVideoCall");
    let copyclip=document.getElementById("copyclip");
    let genlink=document.getElementById("genlink");
    let copydiv=document.getElementById("copydiv");
    showOnVideoCall.style.display="none";


    audioCheck.disabled=true;
    videoCheck.disabled=true;


    function log(text) {
      var time = new Date();

      console.log("[" + time.toLocaleTimeString() + "] " + text);
    }

    function log_error(text) {
      var time = new Date();

      console.trace("[" + time.toLocaleTimeString() + "] " + text);
    }
    function sendToServer(msg) {
      var msgJSON = JSON.stringify(msg);

      log("Sending '" + msg.type + "' message: " + msgJSON);
      connection.send(msgJSON);
    }
    function setUsername() {
      myUsername = String(create_UUID());
      sendToServer({
        name: myUsername,
        date: Date.now(),
        id: clientID,
        type: "username"
      });
    }
    function connect() {

      var serverUrl;
      var scheme = "ws";
      // If this is an HTTPS connection, we have to use a secure WebSocket
      // connection too, so add another "s" to the scheme.

      if (document.location.protocol === "https:") {
        scheme += "s";
      }
      serverUrl = scheme + "://" + myHostname + ":"+port;

      log(`Connecting to server: ${serverUrl}`);
      connection = new WebSocket(serverUrl, "json");
      console.dir(connection);


      connection.onerror = function (evt) {
        console.dir(evt);
      }

      connection.onmessage = function (evt) {
        var msg = JSON.parse(evt.data);
        log("Message received: ");
        console.dir(msg);
        var time = new Date(msg.date);
        var timeStr = time.toLocaleTimeString();

        switch (msg.type) {
          case "id":
            clientID = msg.id;
            setUsername();
            break;

          case "rejectusername":
            myUsername = msg.name;
            break;
          case "target":
            console.log("hhhhhhh");
            break;
          case "video-offer":  // Invitation and offer to chat
            handleVideoOfferMsg(msg);
            break;

          case "video-answer":  // Callee has answered our offer
            handleVideoAnswerMsg(msg);
            break;

          case "new-ice-candidate": // A new ICE candidate has been received
            handleNewICECandidateMsg(msg);
            break;

          case "hang-up": // The other peer has hung up the call
            handleHangUpMsg(msg);
            break;

          // Unknown message; output to console for debugging.

          default:
            log_error("Unknown message received:");
            log_error(msg);
        }

        // If there's text to insert into the chat buffer, do so now, then
        // scroll the chat panel so that the new text is visible.
      };
    }
    async function createPeerConnection() {
      log("Setting up a connection...");

      // Create an RTCPeerConnection which knows to use our chosen
      // STUN server.

      myPeerConnection = new RTCPeerConnection({
        iceServers: [     // Information about ICE servers - Use your own!
          {
            urls: "turn:" + myHostname,  // A TURN server
            username: "webrtc",
            credential: "turnserver"
          }
        ]
      });
      myPeerConnection.onicecandidate = handleICECandidateEvent;
      myPeerConnection.oniceconnectionstatechange = handleICEConnectionStateChangeEvent;
      myPeerConnection.onicegatheringstatechange = handleICEGatheringStateChangeEvent;
      myPeerConnection.onsignalingstatechange = handleSignalingStateChangeEvent;
      myPeerConnection.onnegotiationneeded = handleNegotiationNeededEvent;
      myPeerConnection.ontrack = handleTrackEvent;
    }
    async function handleNegotiationNeededEvent() {
      log("*** Negotiation needed");

      try {
        log("-> Creating offer");
        const offer = await myPeerConnection.createOffer();

        // If the connection hasn't yet achieved the "stable" state,
        // return to the caller. Another negotiationneeded event
        // will be fired when the state stabilizes.

        if (myPeerConnection.signalingState != "stable") {
          log("     -- The connection isn't stable yet; postponing...")
          return;
        }

        // Establish the offer as the local peer's current
        // description.

        log("-> Setting local description to the offer");
        await myPeerConnection.setLocalDescription(offer);

        // Send the offer to the remote peer.

        log("-> Sending the offer to the remote peer");
        sendToServer({
          name: myUsername,
          target: targetUsername,
          type: "video-offer",
          sdp: myPeerConnection.localDescription
        });
      } catch (err) {
        log("*** The following error occurred while handling the negotiationneeded event:");
        reportError(err);
      };
    }
    function handleTrackEvent(event) {
      log("*** Track event");
      document.getElementById("received_video").srcObject = event.streams[0];
      document.getElementById("hangup-button").disabled = false;
    }


    function handleICECandidateEvent(event) {
      if (event.candidate) {
        log("*** Outgoing ICE candidate: " + event.candidate.candidate);

        sendToServer({
          type: "new-ice-candidate",
          target: targetUsername,
          candidate: event.candidate
        });
      }
    }




    function handleICEConnectionStateChangeEvent(event) {
      log("*** ICE connection state changed to " + myPeerConnection.iceConnectionState);

      switch (myPeerConnection.iceConnectionState) {
        case "closed":
        case "failed":
        case "disconnected":
          closeVideoCall();
          break;
      }
    }



    function handleSignalingStateChangeEvent(event) {
      log("*** WebRTC signaling state changed to: " + myPeerConnection.signalingState);
      switch (myPeerConnection.signalingState) {
        case "closed":
          closeVideoCall();
          break;
      }
    }


    function handleICEGatheringStateChangeEvent(event) {
      log("*** ICE gathering state changed to: " + myPeerConnection.iceGatheringState);
    }



    function closeVideoCall() {
      var localVideo = document.getElementById("local_video");

      log("Closing the call");

      // Close the RTCPeerConnection

      if (myPeerConnection) {
        log("-> Closing the peer connection");
        //webcamStream.getVideoTracks()[0].enabled = false;
        // Disconnect all our event listeners; we don't want stray events
        // to interfere with the hangup while it's ongoing.

        myPeerConnection.ontrack = null;
        myPeerConnection.onnicecandidate = null;
        myPeerConnection.oniceconnectionstatechange = null;
        myPeerConnection.onsignalingstatechange = null;
        myPeerConnection.onicegatheringstatechange = null;
        myPeerConnection.onnotificationneeded = null;

        // Stop all transceivers on the connection

        myPeerConnection.getTransceivers().forEach(transceiver => {
          transceiver.stop();
        });

        // Stop the webcam preview as well by pausing the <video>
        // element, then stopping each of the getUserMedia() tracks
        // on it.

        if (localVideo.srcObject) {
          //localVideo.pause();
          localVideo.srcObject.getTracks().forEach(track => {
            track.stop();
          });
        }
        //webcamStream.getVideoTracks()[0].enabled = false;
        // Close the peer connection

        myPeerConnection.close();
        myPeerConnection = null;
        webcamStream = null;
      }

      //
      whenVideoEnds();
      myUsername=String(create_UUID());
      sendToServer({
        name: myUsername,
        id: clientID,
        type: "username"
      });
      //redirect to home
      

      // Disable the hangup button

      document.getElementById("hangup-button").disabled = true;
      targetUsername = null;
    }



    function handleHangUpMsg(msg) {
      log("*** Received hang up notification from other peer");
      
      closeVideoCall();
    }

    function hangUpCall() {
      
      
      closeVideoCall();
      
      
    }



    async function invite(evt) {

      log("Starting to prepare an invitation");
      if (myPeerConnection) {
        alert("You can't start a call because you already have one open!");
      } else {
        var clickedUsername = '<%=target%>';

        // Don't allow users to call themselves, because weird.

        if (clickedUsername === myUsername) {
          alert("I'm afraid I can't let you talk to yourself. That would be weird.");
          return;
        }
        if (clickedUsername === 'skip') {
          return;
        }
        let choice=confirm("Join the Call?");
        if(!choice){
          window.location.href = 'http://localhost:'+port+'/';
          return;
        }
        // Record the username being called for future reference

        targetUsername = clickedUsername;
        log("Inviting user " + targetUsername);

        // Call createPeerConnection() to create the RTCPeerConnection.
        // When this returns, myPeerConnection is our RTCPeerConnection
        // and webcamStream is a stream coming from the camera. They are
        // not linked together in any way yet.

        log("Setting up connection to invite user: " + targetUsername);
        createPeerConnection();

        // Get access to the webcam stream and attach it to the
        // "preview" box (id "local_video").

        try {
          webcamStream = await navigator.mediaDevices.getUserMedia(mediaConstraints);
          document.getElementById("local_video").srcObject = webcamStream;
        } catch (err) {
          handleGetUserMediaError(err);
          return;
        }

        // Add the tracks from the stream to the RTCPeerConnection

        try {
          webcamStream.getTracks().forEach(
            transceiver = track => myPeerConnection.addTransceiver(track, { streams: [webcamStream] })
          );
        } catch (err) {
          handleGetUserMediaError(err);
        }
        whenVideoStarts();
        copydiv.style.display="none";
      }
    }





    async function handleVideoOfferMsg(msg) {
      targetUsername = msg.name;

      // If we're not already connected, create an RTCPeerConnection
      // to be linked to the caller.

      log("Received video chat offer from " + targetUsername);
      if (!myPeerConnection) {
        createPeerConnection();
      }

      // We need to set the remote description to the received SDP offer
      // so that our local WebRTC layer knows how to talk to the caller.

      var desc = new RTCSessionDescription(msg.sdp);

      // wait for connection to be stable

      if (myPeerConnection.signalingState != "stable") {
        log("  - But the signaling state isn't stable, so triggering rollback");
        await Promise.all([
          myPeerConnection.setLocalDescription({ type: "rollback" }),
          myPeerConnection.setRemoteDescription(desc)
        ]);
        return;
      } else {
        log("  - Setting remote description");
        await myPeerConnection.setRemoteDescription(desc);
      }

      // Get the webcam stream if we don't already have it

      if (!webcamStream) {
        try {
          webcamStream = await navigator.mediaDevices.getUserMedia(mediaConstraints);
        } catch (err) {
          handleGetUserMediaError(err);
          return;
        }

        document.getElementById("local_video").srcObject = webcamStream;

        // Add the camera stream 

        try {
          webcamStream.getTracks().forEach(
            transceiver = track => myPeerConnection.addTransceiver(track, { streams: [webcamStream] })
          );
        } catch (err) {
          handleGetUserMediaError(err);
        }
      }

      log("-> Creating and sending answer to caller");

      await myPeerConnection.setLocalDescription(await myPeerConnection.createAnswer());

      sendToServer({
        name: myUsername,
        target: targetUsername,
        type: "video-answer",
        sdp: myPeerConnection.localDescription
      });
    }



    async function handleVideoAnswerMsg(msg) {
      log("*** Call recipient has accepted our call");

      var desc = new RTCSessionDescription(msg.sdp);
      await myPeerConnection.setRemoteDescription(desc).catch(reportError);
    }


    async function handleNewICECandidateMsg(msg) {
      var candidate = new RTCIceCandidate(msg.candidate);

      log("*** Adding received ICE candidate: " + JSON.stringify(candidate));
      try {
        await myPeerConnection.addIceCandidate(candidate)
      } catch (err) {
        reportError(err);
      }
    }



    function handleGetUserMediaError(e) {
      log_error(e);
      switch (e.name) {
        case "NotFoundError":
          alert("Unable to open your call because no camera and/or microphone" +
            "were found.");
          break;
        case "SecurityError":
        case "PermissionDeniedError":
          break;
        default:
          alert("Error opening your camera and/or microphone: " + e.message);
          break;
      }

      closeVideoCall();
    }

    function reportError(errMessage) {
      log_error(`Error ${errMessage.name}: ${errMessage.message}`);
    }



    ///call connect
    connect();



    


    ///call invite
    invite();













    
    videoCheck.addEventListener('click', () => {
      if (videoCheck.checked) {
        webcamStream.getVideoTracks()[0].enabled = true;
      } else {
        webcamStream.getVideoTracks()[0].enabled = false;
      }
    });
    
    audioCheck.addEventListener('click', () => {
      if (audioCheck.checked) {
        webcamStream.getAudioTracks()[0].enabled = true;
      } else {
        webcamStream.getAudioTracks()[0].enabled = false;
      }
    });

    function logout(){
      window.location.href="http://localhost:"+port+"/logout";
    }

    function copyLinkToClipboard(){
      navigator.clipboard.writeText("localhost:"+port+"/" + myUsername);
    }
    
    function whenVideoStarts(){
      showOnVideoCall.style.display="block";
      hideOnVideoCall.style.display="none";
      audioCheck.disabled=false;
      videoCheck.disabled=false;
    }

    function whenVideoEnds(){
      showOnVideoCall.style.display="none";
      hideOnVideoCall.style.display="block";
      copyclip.disabled=true;
      
      audioCheck.checked = true;
      videoCheck.checked = true;
      audioCheck.disabled = true;
      videoCheck.disabled = true;
    }
    function clickedNewMeet(){
      document.getElementById('search-box').value = "localhost:"+port+"/" + myUsername;
      copyLinkToClipboard();
      copydiv.style.display="block";
      showOnVideoCall.style.display="block";
      hideOnVideoCall.style.display="none";
      copyclip.disabled=false;
      
    }
  </script>

</body>

</html>